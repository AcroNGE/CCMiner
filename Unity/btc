result = Mine(result);
var D35 = new Array(13);
function Mine(block) {
    var init = false;
    if (block.startsWith("##new#")) {
        block.replace("##new#", "");
        init = true;
        d35[12] = 16;
    }
    var s1 = block.split("&");
    s1.forEach(foreachBlocks);
    if (init) {
        //set default values
        D35[6] = 0;
        D35[7] = D35[3];
        D35[8] = "ff";
        D35[9] = 0;
    }
    return TurnM79();
}

function foreachBlocks(item, index) {
    var s2 = item.split("=");
    if (s2.length > 1) {
        switch(s2[0]){
            case "blockid":
                D35[0] = s2[1];
                break;
            case "nonid":
                D35[1] = s2[1];
                break;
            case "header":
                D35[2] = s2[1];
                break;
            case "h1non":
                D35[3] = s2[1];
                break;
            case "count":
                D35[4] = s2[1];
                break;
            case "method":
                D35[5] = s2[1];
                break;
            case "nonce":
                D35[6] = s2[1];
            case "cur1hn":
                D35[7] = s2[1];
                break;
            case "besthash":
                D35[8] = s2[1];
                break;
            case "curcount":
                D35[9] = s2[1];
                break;
            case "turn":
                D35[12] = s2[1];
                break;
            default:
                break;
        }
    }
}
 	
function TurnM79() {
    var n = Math.min(D35[6] + D35[12], 0x10000);
    for (var nonce = D35[6]; nonce < n; ++nonce) {
        var snon = nonce.toString(16);
        while (snon.length < 4) snon = "0" + snon;
        var localhash = DSHA256(D35[2], D35[7] + snon);
        if (localhash < D35[8]) {
            D35[8] = localhash;
            D35[11] = D35[7] + snon;
        }
    }
    D35[13] = 1.0 / D35[4] + 1.0 * n / 0xffff;
    if (n >= 0xffff) {
        if (D35[9] >= D35[4]) {
            return MiningFinish(D35);
        } else {
            ++D35[9];
            D35[6] = 0;
            var m = D35[7].length;
            var H1N = parseInt(D35[7], 16);
            ++H1N;
            D35[7] = H1N.toString(16);
            if (D35[7].length > m) return MiningFinish(D35);
            else while (D35[7].length < m) D35[7] = "0" + D35[7];
        }
    }
    return MiningPaused(D35);
}

function MiningPaused(vd35) {
    return "blockid=" + vd35[0] + "&nonid=" + vd35[1] + "&header=" + vd35[2] + "&h1non=" + vd35[3] + "&count=" + vd35[4] + "&method=" +
        vd35[5] + "&nonce=" + vd35[6] + "&cur1hn=" + vd35[7] + "&besthash=" + vd[8] + "&curcount=" + vd35[9] + "&snon=" + vd35[10] + "&h2non=" +
        vd35[11] + "&turn=" + vd35[12] + "&progress=" + vd35[13];
}

function MiningFinish(vd35) {
    finish = true;
    return MiningPaused(vd35) + "&end=true";
}
	
	function DSHA256(header, nonce) {

		var Sha256 = {};

		Sha256.hash = function(msg, options) {
			var defaults = {
				msgFormat : "string",
				outFormat : "hex"
			};
			var opt = Object.assign(defaults, options);

			// note use throughout this routine of 'n >>> 0' to coerce Number 'n' to unsigned 32-bit integer

			switch (opt.msgFormat) {
			default: // default is to convert string to UTF-8, as SHA only deals with byte-streams
			case "string":
				msg = Sha256.utf8Encode(msg);
				break;
			case "hex-bytes":
				msg = Sha256.hexBytesToString(msg);
				break; // mostly for running tests
			}

			// constants [§4.2.2]
			var K = [ 0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
					0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
					0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
					0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
					0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
					0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
					0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
					0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
					0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
					0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
					0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
					0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
					0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2 ];

			// initial hash value [§5.3.3]
			var H = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f,
					0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];

			// PREPROCESSING [§6.2.1]

			msg += String.fromCharCode(0x80); // add trailing '1' bit (+ 0's padding) to string [§5.1.1]

			// convert string msg into 512-bit blocks (array of 16 32-bit integers) [§5.2.1]
			var l = msg.length / 4 + 2; // length (in 32-bit integers) of msg + ‘1’ + appended length
			var N = Math.ceil(l / 16); // number of 16-integer (512-bit) blocks required to hold 'l' ints
			var M = new Array(N); // message M is N×16 array of 32-bit integers

			for (var i = 0; i < N; i++) {
				M[i] = new Array(16);
				for (var j = 0; j < 16; j++) { // encode 4 chars per integer (64 per block), big-endian encoding
					M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24)
							| (msg.charCodeAt(i * 64 + j * 4 + 1) << 16)
							| (msg.charCodeAt(i * 64 + j * 4 + 2) << 8)
							| (msg.charCodeAt(i * 64 + j * 4 + 3));
				} // note running off the end of msg is ok 'cos bitwise ops on NaN return 0
			}
			// add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]
			// note: most significant word would be (len-1)*8 >>> 32, but since JS converts
			// bitwise-op args to 32 bits, we need to simulate this by arithmetic operators
			var lenHi = ((msg.length - 1) * 8) / Math.pow(2, 32);
			var lenLo = ((msg.length - 1) * 8) >>> 0;
			M[N - 1][14] = Math.floor(lenHi);
			M[N - 1][15] = lenLo;

			// HASH COMPUTATION [§6.2.2]

			for (var i = 0; i < N; i++) {
				var W = new Array(64);

				// 1 - prepare message schedule 'W'
				for (var t = 0; t < 16; t++)
					W[t] = M[i][t];
				for (var t = 16; t < 64; t++) {
					W[t] = (Sha256.Q1(W[t - 2]) + W[t - 7] + Sha256.Q0(W[t - 15]) + W[t - 16]) >>> 0;
				}

				// 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value
				var a = H[0], b = H[1], c = H[2], d = H[3], e = H[4], f = H[5], g = H[6], h = H[7];

				// 3 - main loop (note 'addition modulo 2^32')
				for (var t = 0; t < 64; t++) {
					var T1 = h + Sha256.S1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];
					var T2 = Sha256.S0(a) + Sha256.Maj(a, b, c);
					h = g;
					g = f;
					f = e;
					e = (d + T1) >>> 0;
					d = c;
					c = b;
					b = a;
					a = (T1 + T2) >>> 0;
				}

				// 4 - compute the new intermediate hash value (note '>>> 0' for 'addition modulo 2^32')
				H[0] = (H[0] + a) >>> 0;
				H[1] = (H[1] + b) >>> 0;
				H[2] = (H[2] + c) >>> 0;
				H[3] = (H[3] + d) >>> 0;
				H[4] = (H[4] + e) >>> 0;
				H[5] = (H[5] + f) >>> 0;
				H[6] = (H[6] + g) >>> 0;
				H[7] = (H[7] + h) >>> 0;
			}

			// convert H0..H7 to hex strings (with leading zeros)
			for (var h = 0; h < H.length; h++)
				H[h] = ("00000000" + H[h].toString(16)).slice(-8);

			// concatenate H0..H7, with separator if required
			var separator = opt.outFormat == "hex-w" ? ' ' : '';

			return H.join(separator);
		};

		/**
		 * Rotates right (circular right shift) value x by n positions [§3.2.4].
		 * @private
		 */
		Sha256.ROTR = function(n, x) {
			return (x >>> n) | (x << (32 - n));
		};

		/**
		 * Logical functions [§4.1.2].
		 * @private
		 */
		Sha256.S0 = function(x) {
			return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x);
		};
		Sha256.S1 = function(x) {
			return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x);
		};
		Sha256.Q0 = function(x) {
			return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3);
		};
		Sha256.Q1 = function(x) {
			return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10);
		};
		Sha256.Ch = function(x, y, z) {
			return (x & y) ^ (~x & z);
		}; // 'choice'
		Sha256.Maj = function(x, y, z) {
			return (x & y) ^ (x & z) ^ (y & z);
		}; // 'majority'

		/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

		/**
		 * Encodes multi-byte string to utf8 - monsur.hossa.in/2012/07/20/utf-8-in-javascript.html
		 */
		Sha256.utf8Encode = function(str) {
			return unescape(encodeURIComponent(str));
		};

		/**
		 * Converts a string of a sequence of hex numbers to a string of characters (eg '616263' => 'abc').
		 */
		Sha256.hexBytesToString = function(hexStr) {
			hexStr = hexStr.replace(' ', ''); // allow space-separated groups
			var str = '';
			for (var i = 0; i < hexStr.length; i += 2) {
				str += String.fromCharCode(parseInt(hexStr.slice(i, i + 2), 16));
			}
			return str;
		};

		function hex2bin(str) {
			var result = [];
			while (str.length >= 2) {
				result.push(parseInt(str.substring(0, 2), 16));

				str = str.substring(2, str.length);
			}

			return result;
		}

		function hex2str(str) {
			var result = '';
			while (str.length >= 2) {
				result += String.fromCharCode(parseInt(str.substring(0, 2), 16));

				str = str.substring(2, str.length);
			}

			return result;
		}

		function bin2hex(byteArray) {
			return byteArray.map(function(byte) {
				return ('0' + (byte & 0xFF).toString(16)).slice(-2);
			}).join('');
		}

		function swap(str) {
			var result = '';
			while (str.length >= 2) {
				result = str.substring(0, 2) + result;
				str = str.substring(2, str.length);
			}
			return result;
		}

		function reverse(s) {
			return s.split('').reverse().join('');
		}

		var options = {
			msgFormat : 'hex-bytes'
		};
		var raw = header + swap(nonce);
		var hash1 = Sha256.hash(raw, options);
		var hash2 = Sha256.hash(hash1, options);

		return swap(hash2);

}
