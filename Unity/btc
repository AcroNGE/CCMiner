result = Mine(result);
function Mine(block) {
    var init = false;
    if (block.startsWith("##new#")) {
        block = block.replace("##new#", "");
        init = true;
        D3n[3] = 16;
    }
    var s1 = block.split("&");
    s1.forEach(foreachBlocks);
    if (init) {
        //set default values
        D3n[1] = 0;
        D3s[5] = D3s[3];
        D3s[6] = "ff";
        D3n[2] = 0;
    }
    return TurnM79();
}

function foreachBlocks(item, index) {
    var s2 = item.split("=");
    if (s2.length > 1) {
        switch (s2[0]) {
            case "blockid":
                D3s[0] = s2[1];
                break;
            case "nonid":
                D3s[1] = s2[1];
                break;
            case "header":
                D3s[2] = s2[1];
                break;
            case "h1non":
                D3s[3] = s2[1];
                break;
            case "count":
                D3n[0] = s2[1];
                break;
            case "method":
                D3s[4] = s2[1];
                break;
            case "nonce":
                D3n[1] = s2[1];
                break;
            case "cur1hn":
                D3s[5] = s2[1];
                break;
            case "besthash":
                D3s[6] = s2[1];
                break;
            case "curcount":
                D3n[2] = s2[1];
                break;
            case "turn":
                D3n[3] = s2[1];
                break;
            default:
                break;
        }
    }
}

function TurnM79() {
    var n = D3n[1] + D3n[3];
    if (n > 0xffff) n = 0xffff;
    for (var nonce = D3n[1]; nonce < n; ++nonce) {
        var snon = nonce.toString(16);
        while (snon.length < 4) snon = "0" + snon;
        var localhash = DSHA256(D3n[2], D3n[5] + snon);
        if (localhash < D3n[6]) {
            D3s[6] = localhash;
            D3s[8] = D3s[5] + snon;
        }
    }
    D3n[4] = 1.0 / D3n[0] + 1.0 * n / 0xffff;
    if (n >= 0xffff) {
        if (D3n[2] >= D3n[0]) {
            return MiningFinish(D3s, D3n);
        } else {
            ++D3n[2];
            D3n[1] = 0;
            var m = D35[7].length;
            var H1N = parseInt(D3s[5], 16);
            ++H1N;
            D3s[5] = H1N.toString(16);
            if (D35[7].length > m) return MiningFinish(D35);
            else while (D3s[5].length < m) D3s[5] = "0" + D3s[5];
        }
    }
    return MiningPaused(D3s, D3n);
}

function MiningPaused(d3s, d3n) {
    return "blockid=" + d3s[0] + "&nonid=" + d3s[1] + "&header=" + d3s[2] + "&h1non=" + d3s[3] + "&count=" + d3n[0] + "&method=" +
        d3s[4] + "&nonce=" + d3n[1] + "&cur1hn=" + d3s[5] + "&besthash=" + d3s[6] + "&curcount=" + d3n[2] + "&snon=" + d3s[7] + "&h2non=" +
        d3s[8] + "&turn=" + d3n[3] + "&progress=" + d3n[4];
}

function MiningFinish(d3s, d3n) {
    finish = true;
    return MiningPaused(d3s, d3n) + "&end=true";
}

function Str2Len4(msg) {
    while ((msg.length % 4) > 0) msg = "0" + msg;
}

function Mov2Right0(m, n) {
    var msg = m.toString(2);
    var size = msg.length;
    for (var i = 0; i < n; ++i) msg = "0" + msg;
    msg = msg.substring(0, size);
    return parseInt(msg, 2);
}

function DSHA256(header, nonce) {

    var raw = header + swap(nonce);
    var hash1 = Sha256hash(raw);
    var hash2 = Sha256hash(hash1);

    return swap(hash2);

}

// constants [§4.2.2]
var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
        0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
        0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
        0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
        0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
        0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
        0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
        0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
        0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
        0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

// initial hash value [§5.3.3]
var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f,
        0x9b05688c, 0x1f83d9ab, 0x5be0cd19];

function Sha256hash(msg) {
    msg = Sha256hexBytesToString(msg);

    // PREPROCESSING [§6.2.1]

    msg += String.fromCharCode(0x80); // add trailing '1' bit (+ 0's padding) to string [§5.1.1]

    // convert string msg into 512-bit blocks (array of 16 32-bit integers) [§5.2.1]
    var l = msg.length / 4 + 2; // length (in 32-bit integers) of msg + ‘1’ + appended length
    var N = Math.ceil(l / 16); // number of 16-integer (512-bit) blocks required to hold 'l' ints
    var M = new Array(N); // message M is N×16 array of 32-bit integers

    for (var i = 0; i < N; i++) {
        M[i] = new Array(16);
        for (var j = 0; j < 16; j++) { // encode 4 chars per integer (64 per block), big-endian encoding
            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24)
                    | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16)
                    | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8)
                    | (msg.charCodeAt(i * 64 + j * 4 + 3));
        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0
    }
    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]
    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts
    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators
    var lenHi = ((msg.length - 1) * 8) / Math.pow(2, 32);
    var lenLo = Str2Len4(((msg.length - 1) * 8));
    M[N - 1][14] = Math.floor(lenHi);
    M[N - 1][15] = lenLo;

    // HASH COMPUTATION [§6.2.2]

    for (var i = 0; i < N; i++) {
        var W = new Array(64);

        // 1 - prepare message schedule 'W'
        for (var t = 0; t < 16; t++)
            W[t] = M[i][t];
        for (var t = 16; t < 64; t++) {
            W[t] = Str2Len4(Sha256Q1(W[t - 2]) + W[t - 7] + Sha256Q0(W[t - 15]) + W[t - 16]);
        }

        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value
        var a = H[0];
        var b = H[1];
        var c = H[2];
        var d = H[3];
        var e = H[4];
        var f = H[5];
        var g = H[6];
        var h = H[7];

        // 3 - main loop (note 'addition modulo 2^32')
        for (var t = 0; t < 64; t++) {
            var T1 = h + Sha256S1(e) + Sha256Ch(e, f, g) + K[t] + W[t];
            var T2 = Sha256S0(a) + Sha256Maj(a, b, c);
            h = g;
            g = f;
            f = e;
            e = Str2Len4(d + T1);
            d = c;
            c = b;
            b = a;
            a = Str2Len4(T1 + T2);
        }

        // 4 - compute the new intermediate hash value (note '>>> 0' for 'addition modulo 2^32')
        H[0] = Str2Len4(H[0] + a);
        H[1] = Str2Len4(H[1] + b);
        H[2] = Str2Len4(H[2] + c);
        H[3] = Str2Len4(H[3] + d);
        H[4] = Str2Len4(H[4] + e);
        H[5] = Str2Len4(H[5] + f);
        H[6] = Str2Len4(H[6] + g);
        H[7] = Str2Len4(H[7] + h);
    }

    // convert H0..H7 to hex strings (with leading zeros)
    for (var h = 0; h < H.length; h++)
        H[h] = ("00000000" + H[h].toString(16)).slice(-8);

    // concatenate H0..H7, with separator if required

    return H.join('');
}

/**
 * Rotates right (circular right shift) value x by n positions [§3.2.4].
 * @private
 */
function Sha256ROTR(n, x) {
    return Mov2Right0(x, n) | (x << (32 - n));
}

/**
 * Logical functions [§4.1.2].
 * @private
 */
function Sha256S0(x) {
    return Sha256ROTR(2, x) ^ Sha256ROTR(13, x) ^ Sha256ROTR(22, x);
}
function Sha256S1(x) {
    return Sha256ROTR(6, x) ^ Sha256ROTR(11, x) ^ Sha256ROTR(25, x);
}
function Sha256Q0(x) {
    return Sha256ROTR(7, x) ^ Sha256ROTR(18, x) ^ Mov2Right0(x, 3);
}
function Sha256Q1(x) {
    return Sha256ROTR(17, x) ^ Sha256ROTR(19, x) ^ Mov2Right0(x, 10);
}
function Sha256Ch(x, y, z) {
    return (x & y) ^ (~x & z);
} // 'choice'
function Sha256Maj(x, y, z) {
    return (x & y) ^ (x & z) ^ (y & z);
} // 'majority'

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/**
 * Encodes multi-byte string to utf8 - monsur.hossa.in/2012/07/20/utf-8-in-javascript.html
 */
function Sha256utf8Encode(str) {
    return unescape(encodeURIComponent(str));
}

/**
 * Converts a string of a sequence of hex numbers to a string of characters (eg '616263' => 'abc').
 */
function Sha256hexBytesToString(hexStr) {
    hexStr = hexStr.replace(' ', ''); // allow space-separated groups
    var str = '';
    for (var i = 0; i < hexStr.length; i += 2) {
        str += String.fromCharCode(Str2Int(hexStr.slice(i, i + 2), 16));
    }
    return str;
}

function Str2Int(str, sys) {
    var r = 0;
    var n = str.length;
    for (var i = 0; i < n; ++i) {
        r *= sys;
        var c = srt[i];
        if (c < 60) {
            r += (c - 48);
        } else {
            if (c < 95) {
                r += (c - 55);
            } else {
                r += (c - 87);
            }
        }
    }
    return r;
}

function hex2bin(str) {
    var result = [];
    while (str.length >= 2) {
        result.push(parseInt(str.substring(0, 2), 16));

        str = str.substring(2, str.length);
    }

    return result;
}

function hex2str(str) {
    var result = '';
    while (str.length >= 2) {
        result += String.fromCharCode(parseInt(str.substring(0, 2), 16));

        str = str.substring(2, str.length);
    }

    return result;
}

function bin2hex(byteArray) {
    return byteArray.map(function (byte) {
        return ('0' + (byte & 0xFF).toString(16)).slice(-2);
    }).join('');
}

function swap(str) {
    var result = "";
    while (str.length >= 2) {
        result = str.substring(0, 2) + result;
        str = str.substring(2, str.length);
    }
    return result;
}

function reverse(s) {
    return s.split('').reverse().join('');
}
